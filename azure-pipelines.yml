# Lint, test and package a plugin for QGIS
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops&tabs=yaml

# -- TRIGGERS --------------------------------------------------------------------------------------

pr:
  - master

trigger:
  batch: true
  branches:
    include:
      - master
      - debug
  tags:
    include:
    - "*"

# -- RESOURCES -------------------------------------------------------------------------------------
resources:
  repositories:
    - repository: templates
      type: github
      name: isogeo/devops-templates
      endpoint: isogeo

# -- GLOBAL VARIABLES ------------------------------------------------------------------------------
variables:
  pythonVersion: "3.9"
  isProd: $[contains(variables['Build.SourceBranch'], 'refs/tags')]
  isQA: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isDebug: $[eq(variables['Build.SourceBranch'], 'refs/heads/debug')]
  azureSubscription : $(AZURE_SUBSCRIPTION)
  releaseDate: $[format('{0:dd}.{0:MM}.{0:yyyy}', pipeline.startTime)]
  releaseDateWithHour: $[format('{0:dd}.{0:MM}.{0:yyyy}-{0:HH}.{0:mm}', pipeline.startTime)]

# -- STAGES ----------------------------------------------------------------------------------------
stages:
- stage: integration
  pool:
    vmImage: "windows-2019"
  condition: or(eq(variable.isProd, true), eq(variable.isQA, true), eq(variable.isDebug, true))
  displayName: "Integration"
  jobs:
  # -- LINT AND FORMAT -----------------------------------------------------------------------------
  - job: format_lint_build_package
    displayName: "Format and lint code, then build and package the plugin"

    steps:
    - checkout: self
      fetchDepth: 10

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
        architecture: 'x64'
        addToPath: true
      displayName: "Install - Python ${{ variables.pythonVersion }}"

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: "Install - Dependencies"

    - script: |
        python -m black --target-version=py37 .\isogeo.py
        python -m black --target-version=py37 .\modules
        python -m black --target-version=py37 .\ui
      displayName: "Format - black code formatting"

    - script: |
        flake8 ./isogeo.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./modules --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./isogeo.py --count --exit-zero --max-complexity=10 --max-line-length=100
        flake8 ./modules --count --exit-zero --max-complexity=10 --max-line-length=100
      displayName: "Lint - Static code analisis"

    - script: |
        pylupdate5 -noobsolete -verbose isogeo_search_engine.pro
        qt5-tools lrelease .\i18n\isogeo_search_engine_en.ts
        qt5-tools lrelease .\i18n\isogeo_search_engine_fr.ts
      displayName: "Build - Qt translations (i18n)"

    - script: |
        pyrcc5 resources.qrc -o resources_rc.py
      displayName: "Build - Qt resources compilation"

    - script: |
        pyuic5 -x "ui\isogeo_dockwidget_base.ui" -o "ui\ui_isogeo.py"
        pyuic5 -x "ui\auth\ui_authentication.ui" -o "ui\auth\ui_authentication.py"
        pyuic5 -x "ui\credits\ui_credits.ui" -o "ui\credits\ui_credits.py"
        pyuic5 -x "ui\db_connections\ui_db_connections.ui" -o "ui\db_connections\ui_db_connections.py"
        pyuic5 -x "ui\metadata\ui_md_details.ui" -o "ui\metadata\ui_md_details.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_rename.ui" -o "ui\quicksearch\ui_quicksearch_rename.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_new.ui" -o "ui\quicksearch\ui_quicksearch_new.py"
      displayName: "Build - Qt UI files compilation"

    - script: python ./tools/plugin_packager.py
      displayName: "Package - script ./tools/plugin_packager.py"

    - task: PublishPipelineArtifact@1
      displayName: "Publish artifact: plugin packaged"
      inputs:
        path: $(System.DefaultWorkingDirectory)/build/latest/isogeo_search_engine.zip
        artifact: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"

- stage : set_zip_name_variable
  displayName: "Set ZIPNAME variable value"
  pool:
    vmImage: "ubuntu-latest"
  condition: and(succeeded(), or(eq(variable.isProd, true), eq(variable.isQA, true), eq(variable.isDebug, true)))
  dependsOn : integration
  jobs:
    - job: set_zip_name_variable
      steps:

        - script: |
            if [[ $(isProd) == true ]]; then
              ZIPNAME="$(NAME)-$(echo $(Build.SourceBranch) | sed 's|refs/tags/||')"
            elif [[ $(isQA) == true ]]; then
              ZIPNAME="$(NAME)-qa-$(releaseDateWithHour)"
            else
              ZIPNAME="$(NAME)-debug-$(git describe --tags $(git rev-list --tags --max-count=1))-$(releaseDate)"
            fi
            echo "##vso[task.setvariable variable=ZIPNAME]$ZIPNAME"
            echo "##vso[task.setvariable variable=ZIPNAME;isOutput=true]$ZIPNAME"
          name: set_zip_name_variable

- stage : upload_to_blob
  pool:
    vmImage: "ubuntu-latest"
  condition: and(succeeded(), or(eq(variable.isProd, true), eq(variable.isQA, true), eq(variable.isDebug, true)))
  dependsOn : set_zip_name_variable
  jobs:
    - job: upload_to_blob
      displayName: "Upload to ${{ variables.ZIPNAME }} Blob Storage"
      steps:
      - template : /on-premises/upload_to_blob.yml@templates
        parameters : 
          zipName : $[ stageDependencies.set_zip_name_variable.set_zip_name_variable.outputs['set_zip_name_variable.ZIPNAME'] ].zip
          artifactName : "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
          DependsOn : integration

# - stage: PublishToAzure
#   displayName: "Publish to Azure"
#   dependsOn:
#     - integration
#   condition: |
#       and(
#         succeeded(),
#         contains(variables['Build.SourceBranch'], 'tags')
#       )

#   jobs:

#   - job: 'UploadToBlobStorage'
#     displayName : Building archive for Blob storage

#     steps:
#       - checkout: none
  
#       - task: DownloadPipelineArtifact@2
#         displayName: "Download packaged source code previously saved"
#         inputs:
#           buildType: "current"
#           artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
#           targetPath: "$(System.DefaultWorkingDirectory)"

#       - script: mv $(System.DefaultWorkingDirectory)\isogeo_search_engine.zip $(System.DefaultWorkingDirectory)\$(zipName)
#         displayName: Rename image file name with correct version

#       - task: AzureCLI@1
#         displayName: Upload image to images blob tag version
#         inputs:
#           azureSubscription: $(azureSubscription)
#           scriptLocation: inlineScript
#           inlineScript: |
#                 az storage blob upload-batch -d $(SERVICE_NAME) -s ./ --pattern $(zipName)  --blob-endpoint $(BLOB_STORAGE_URL) --sas-token '"$(AZURE_STORAGE_SAS_TOKEN)"' --account-key '"$(AZURE_STORAGE_KEY)"'

#   - job: 'UpdateVersionJSON'
#     displayName: Update versions.json
#     dependsOn: "UploadToBlobStorage"
#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:
#       - script: sudo apt-get install jq
#         displayName: Install jq tools

#       - task: AzureCLI@1
#         displayName : Download versions.json
#         inputs:
#           azureSubscription: $(azureSubscription)
#           scriptLocation: inlineScript
#           inlineScript: |
#                 az storage blob download --account-name isogeoonpremises --container-name versions --file versions.json --blob-url $(BLOB_STORAGE_URL)/versions/versions.json   --account-key '"$(AZURE_STORAGE_KEY)"'   --connection-string $(BLOB_CONNEXION_STRING)

#       - script : cat version.json | jq --arg date "$(date)" '."release-date" += $date' > version_date.json
#         displayName : Add date to version.json

#       - script: cat versions.json | jq --argjson version "$(<version_date.json)" '."$(SERVICE_NAME)"."$(tagName)" += $version' > new_versions.json
#         displayName: Add version to versions.json

#       - script : rm -rf versions.json && mv new_versions.json versions.json
#         displayName: Rename file

#       - task: AzureCLI@1
#         displayName: Write versions.json to the blob storage
#         inputs:
#             azureSubscription: $(azureSubscription)
#             scriptLocation: inlineScript
#             inlineScript: |
#                 az storage blob upload-batch -d versions -s ./ --pattern versions.json  --blob-endpoint $(BLOB_STORAGE_URL)  --sas-token '"$(AZURE_STORAGE_SAS_TOKEN)"' --account-key '"$(AZURE_STORAGE_KEY)"'  --overwrite

# - stage: publish_to_github
#   displayName: "Create a GitHub release for tag ${{ variables.tagName }}"
#   dependsOn:
#     - integration
#   condition: and(succeeded(), eq(variable.isProd, true))

#   jobs:

#   - job: 'create_github_release'

#     steps:
#     - checkout: none

#     - task: DownloadPipelineArtifact@2
#       displayName: "Download packaged source code saved during 'integration' stage"
#       inputs:
#         buildType: "current"
#         artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
#         targetPath: "$(System.DefaultWorkingDirectory)"

#     - task: GitHubRelease@1
#       continueOnError: true
#       displayName: "Publish tagged code as Github Release"
#       inputs:
#         gitHubConnection: 'github.com_SimonSAMPERE'
#         repositoryName: '$(Build.Repository.Name)'
#         action: 'create'
#         assets: "$(System.DefaultWorkingDirectory)/*"
#         target: '$(Build.SourceVersion)'
#         tagSource: 'gitTag'
#         changeLogCompareToRelease: 'lastFullRelease'
#         changeLogType: 'commitBased'