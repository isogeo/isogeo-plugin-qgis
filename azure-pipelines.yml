# Lint, test and package a plugin for QGIS
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops&tabs=yaml

# CONDITIONS WHICH TRIGGER OR NOT THE JOBS
trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - "*"

pr:
- master

# -- GLOBAL VARIABLES ------------------------------------------------------------------
variables:
  PLUGIN_NAME: Isogeo
  QGIS_IMAGE: qgis/qgis
  QGIS_VERSION_TAG: release-3_4
  pythonVersion: "3.7"
  vmImageName: "windows-2019"

# -- STAGES ----------------------------------------------------------------------------
stages:

- stage: Lint
  # -- LINT AND FORMAT -----------------------------------------------------------------
  displayName: Format and lint code
  jobs:

  # LINT AND FORMATTING CODE
  - job: 'Lint'
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      fetchDepth: 10

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
        architecture: 'x64'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: |
        python -m black --target-version=py37 .\isogeo.py
        python -m black --target-version=py37 .\modules
        python -m black --target-version=py37 .\tools
        python -m black --target-version=py37 .\tests
        python -m black --target-version=py37 .\ui
      displayName: "Apply black code formatting"

    - script: |
        flake8 ./isogeo.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./modules --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./isogeo.py --count --exit-zero --max-complexity=10 --max-line-length=100
        flake8 ./modules --count --exit-zero --max-complexity=10 --max-line-length=100
      displayName: "Static code analisis: PEP8 conformance, imports... (flake8)"

    # save formatted code to use later avoiding git clone again
    - publish: $(System.DefaultWorkingDirectory)
      artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
      displayName: "Publish formatted code with dependencies"

- stage: Build
  # --  BUILD --------------------------------------------------------------------------
  displayName: "Build and package"
  dependsOn: Lint
  condition: |
    and(
      succeeded(),
      ne(variables['System.PullRequest.SourceBranch'], 'docs')
    )

  jobs:
  # UI COMPILATION
  - job: "BuildUi"  # only letters and numbers (no space...)
    displayName: "Qt - compilation and internationalization"  # can't contain special characters
    pool:
      vmImage: $(vmImageName)

    steps:
    # no need for source code
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
        architecture: 'x64'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: |
        pylupdate5 -noobsolete -verbose isogeo_search_engine.pro
        lrelease .\i18n\isogeo_search_engine_en.ts
        lrelease .\i18n\isogeo_search_engine_fr.ts
      displayName: "Qt: processing translations (i18n)"

    - script: |
        pyrcc5 resources.qrc -o resources_rc.py
      displayName: "Qt: processing resources compilation"

    - script: |
        pyuic5 -x "ui\isogeo_dockwidget_base.ui" -o "ui\ui_isogeo.py"
        pyuic5 -x "ui\auth\ui_authentication.ui" -o "ui\auth\ui_authentication.py"
        pyuic5 -x "ui\credits\ui_credits.ui" -o "ui\credits\ui_credits.py"
        pyuic5 -x "ui\metadata\ui_md_details.ui" -o "ui\metadata\ui_md_details.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_rename.ui" -o "ui\quicksearch\ui_quicksearch_rename.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_new.ui" -o "ui\quicksearch\ui_quicksearch_new.py"
      displayName: "Qt: processing UI files compilation"

    - task: PublishPipelineArtifact@1
      displayName: "Publish artifact: Qt stuff compiled"
      inputs:
        path: $(System.DefaultWorkingDirectory)
        artifact: "COMPILED_$(Build.SourceBranchName)_$(Build.BuildId)"

  # UI COMPILATION
  - job: "Packaging"  # only letters and numbers (no space...)
    displayName: "Packaging the plugin"  # can't contain special characters
    dependsOn: "BuildUi"
    pool:
      vmImage: $(vmImageName)

    steps:

    # no need for source code
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifactName: "COMPILED_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - task: UsePythonVersion@0
      displayName: "Install Python"
      inputs:
        versionSpec: $(pythonVersion)
        architecture: "x64"
        addToPath: true

    - script: python ./tools/plugin_packager.py
      displayName: "Packager script"

    - task: PublishPipelineArtifact@1
      displayName: "Publish artifact: plugin packaged"
      inputs:
        path: $(System.DefaultWorkingDirectory)/build/latest/isogeo_search_engine.zip
        artifact: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"

- stage: DeployPackage
  # -- DEPLOY --------------------------------------------------------------------------
  displayName: "Deploy package"
  dependsOn:
    - Build
  condition: |
    and(
      succeeded(),
      contains(variables['Build.SourceBranch'], 'tags')
    )

  jobs:

  - job: 'PublishGithubRelease'
    displayName: "Publish to Github release"
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - task: GitHubRelease@1
      continueOnError: true
      displayName: "Publish tagged code as Github Release"
      inputs:
        gitHubConnection: 'github_isogeo'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        assets: "$(System.DefaultWorkingDirectory)/*"
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'

- stage: TestOnDocker
  # --TESTING --------------------------------------------------------------------------
  displayName: "Test installation (Docker Linux)"
  dependsOn:
    - Build

  jobs:

  - job: 'TestDockerLinux'
    variables:
      DISPLAY: ":99" 
    pool:
      vmImage: 'ubuntu-16.04'

      container: $(QGIS_IMAGE):$(QGIS_VERSION_TAG)
      environment:
          DISPLAY: ":99"

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - script: python3 -m pip install -U pip setuptools
      displayName: "Install Python requirements"
      continueOnError: true
    
    - script: |
        docker run -d --name qgis-testing-environment -v $(System.DefaultWorkingDirectory):/$(PLUGIN_NAME) -e DISPLAY=$(DISPLAY) $(IMAGE):$(QGIS_VERSION_TAG)
      displayName: "run the qgis container naming it as 'qgis-testing-environment'"
