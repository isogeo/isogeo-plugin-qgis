# Lint, test and package a plugin for QGIS
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops&tabs=yaml

# CONDITIONS WHICH TRIGGER OR NOT THE JOBS
trigger:
  batch: true
  branches:
    include:
      - debug
      - master
  tags:
    include:
    - "*"

pr:
- master

# -- GLOBAL VARIABLES ------------------------------------------------------------------
variables:
  PLUGIN_NAME: Isogeo
  QGIS_VERSION_TAG: release-3_16
  QGIS_IMAGE: qgis/qgis
  pythonVersion: "3.7"
  vmImageName: "windows-2019"
  VERSION_NAME: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]
  VERSION_SUFIX: $[replace(variables['VERSION_NAME'], '.', '_')]
  sourceName: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]
  blobstorageURL: $(BLOB_STORAGE_URL)
  tag: '$(Build.BuildId)'
  azureSubscription : $(AZURE_SUBSCRIPTION)
  date: $[format('{0:dd}.{0:MM}.{0:yyyy}', pipeline.startTime)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/debug') }}:
     tagName : debug-$(date)
  ${{ if contains(variables['Build.SourceBranch'], 'refs/tags') }}:
     tagName : $(sourceName)

# -- STAGES ----------------------------------------------------------------------------
stages:

- stage: Lint
  # -- LINT AND FORMAT -----------------------------------------------------------------
  displayName: Format and lint code
  jobs:

  # LINT AND FORMATTING CODE
  - job: 'Lint'
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      fetchDepth: 10

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
        architecture: 'x64'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: |
        python -m black --target-version=py37 .\isogeo.py
        python -m black --target-version=py37 .\modules
        python -m black --target-version=py37 .\tools
        python -m black --target-version=py37 .\tests
        python -m black --target-version=py37 .\ui
      displayName: "Apply black code formatting"

    - script: |
        flake8 ./isogeo.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./modules --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./isogeo.py --count --exit-zero --max-complexity=10 --max-line-length=100
        flake8 ./modules --count --exit-zero --max-complexity=10 --max-line-length=100
      displayName: "Static code analisis: PEP8 conformance, imports... (flake8)"

    # save formatted code to use later avoiding git clone again
    - publish: $(System.DefaultWorkingDirectory)
      artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
      displayName: "Publish formatted code with dependencies"

- stage: Build
  # --  BUILD --------------------------------------------------------------------------
  displayName: "Build and package"
  dependsOn: Lint
  condition: |
    and(
      succeeded(),
      ne(variables['System.PullRequest.SourceBranch'], 'docs')
    )

  jobs:
  # UI COMPILATION
  - job: "BuildUi"  # only letters and numbers (no space...)
    displayName: "Qt - compilation and internationalization"  # can't contain special characters
    pool:
      vmImage: $(vmImageName)

    steps:
    # no need for source code
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
        architecture: 'x64'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: |
        pylupdate5 -noobsolete -verbose isogeo_search_engine.pro
        lrelease .\i18n\isogeo_search_engine_en.ts
        lrelease .\i18n\isogeo_search_engine_fr.ts
      displayName: "Qt: processing translations (i18n)"

    - script: |
        pyrcc5 resources.qrc -o resources_rc.py
      displayName: "Qt: processing resources compilation"

    - script: |
        pyuic5 -x "ui\isogeo_dockwidget_base.ui" -o "ui\ui_isogeo.py"
        pyuic5 -x "ui\auth\ui_authentication.ui" -o "ui\auth\ui_authentication.py"
        pyuic5 -x "ui\credits\ui_credits.ui" -o "ui\credits\ui_credits.py"
        pyuic5 -x "ui\db_connections\ui_db_connections.ui" -o "ui\db_connections\ui_db_connections.py"
        pyuic5 -x "ui\metadata\ui_md_details.ui" -o "ui\metadata\ui_md_details.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_rename.ui" -o "ui\quicksearch\ui_quicksearch_rename.py"
        pyuic5 -x "ui\quicksearch\ui_quicksearch_new.ui" -o "ui\quicksearch\ui_quicksearch_new.py"
      displayName: "Qt: processing UI files compilation"

    - task: PublishPipelineArtifact@1
      displayName: "Publish artifact: Qt stuff compiled"
      inputs:
        path: $(System.DefaultWorkingDirectory)
        artifact: "COMPILED_$(Build.SourceBranchName)_$(Build.BuildId)"

  # UI COMPILATION
  - job: "Packaging"  # only letters and numbers (no space...)
    displayName: "Packaging the plugin"  # can't contain special characters
    dependsOn: "BuildUi"
    pool:
      vmImage: $(vmImageName)

    steps:

    # no need for source code
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifactName: "COMPILED_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"

    - task: UsePythonVersion@0
      displayName: "Install Python"
      inputs:
        versionSpec: $(pythonVersion)
        architecture: "x64"
        addToPath: true

    - script: python ./tools/plugin_packager.py
      displayName: "Packager script"

    - task: PublishPipelineArtifact@1
      displayName: "Publish artifact: plugin packaged"
      inputs:
        path: $(System.DefaultWorkingDirectory)/build/latest/isogeo_search_engine.zip
        artifact: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"

# - stage: PublishtoGitHub
#   displayName: "Publish to GitHub"
#   dependsOn:
#     - Build
#   condition: |
#     and(
#       succeeded(),
#       contains(variables['Build.SourceBranch'], 'tags')
#     )

#   jobs:

#   - job: 'PublishGithubRelease'
#     displayName: "Publish to Github release"
#     pool:
#       vmImage: $(vmImageName)

#     steps:
#     - checkout: none

#     - task: DownloadPipelineArtifact@2
#       displayName: "Download artifact previously saved"
#       inputs:
#         buildType: "current"
#         artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
#         targetPath: "$(System.DefaultWorkingDirectory)"

#     - task: GitHubRelease@1
#       continueOnError: true
#       displayName: "Publish tagged code as Github Release"
#       inputs:
#         gitHubConnection: 'github.com_SimonSAMPERE'
#         repositoryName: '$(Build.Repository.Name)'
#         action: 'create'
#         assets: "$(System.DefaultWorkingDirectory)/*"
#         target: '$(Build.SourceVersion)'
#         tagSource: 'gitTag'
#         changeLogCompareToRelease: 'lastFullRelease'
#         changeLogType: 'commitBased'


- stage: PublishToAzure
  displayName: "Publish to Azure"
  dependsOn:
    - Build
  condition: |
    and(
      succeeded(),
      contains(variables['Build.SourceBranch'], 'refs/tags')
    )

  jobs:

  - job: 'UploadToBlobStorage'
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/debug'),contains(variables['Build.SourceBranch'], 'refs/tags'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName : Building archive for Blob storage
    pool:
      vmImage: $(vmImageName)

    steps:
      - checkout: none
  
      - task: DownloadPipelineArtifact@2
        displayName: "Download artifact previously saved"
        inputs:
          buildType: "current"
          downloadType: 'single'
          artifactName: "PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId)"
          targetPath: "$(System.DefaultWorkingDirectory)"

      - script : TAR_NAME=`echo $(SERVICE_NAME)-debug-$(git describe --tags $(git rev-list --tags --max-count=1))-$(date).tar` && echo "##vso[task.setvariable variable=tarname]$TAR_NAME"
        displayName: Set tar name
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/debug')

      - script : TAR_NAME=`echo $(SERVICE_NAME)-$(sourceName).tar` && echo "##vso[task.setvariable variable=tarname]$TAR_NAME"
        displayName: Set tar name
        condition: contains(variables['Build.SourceBranch'], 'refs/tags')

      - script: mv $(System.DefaultWorkingDirectory)/PACKAGED_$(Build.SourceBranchName)_$(Build.BuildId) $(System.DefaultWorkingDirectory)/$(tarname)
        displayName: Rename image file name with correct version

      - task: AzureCLI@1
        displayName: Upload image to images blob tag version
        inputs:
          azureSubscription: $(azureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
                az storage blob upload-batch -d $(SERVICE_NAME) -s ./ --pattern $(tarname)  --blob-endpoint $(blobstorageURL) --sas-token '"$(AZURE_STORAGE_SAS_TOKEN)"' --account-key '"$(AZURE_STORAGE_KEY)"'

  - job: 'Updatejson'
    displayName: Update versions.json
    pool:
      vmImage: $(vmImageName)
    steps:

    - script: sudo apt-get install jq
      displayName: Install jq tools

    - task: AzureCLI@1
      displayName : Download versions.json
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: |
              az storage blob download --account-name isogeoonpremises --container-name versions --file versions.json --blob-url $(blobstorageURL)/versions/versions.json   --account-key '"$(AZURE_STORAGE_KEY)"'   --connection-string $(BLOB_CONNEXION_STRING)

    - script : cat version.json | jq --arg date "$(date)" '.releaseDate += $date' > version_date.json
      displayName : Add date to version.json

    - script: cat versions.json | jq --argjson version "$(<version_date.json)" '.$(SERVICE_NAME)."$(tagName)" += $version' > new_versions.json
      displayName: Add version to versions.json

    - script : rm -rf versions.json && mv new_versions.json versions.json
      displayName: Rename file

    - task: AzureCLI@1
      displayName: Write versions.json to the blob storage
      inputs:
          azureSubscription: $(azureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
              az storage blob upload-batch -d versions -s ./ --pattern versions.json  --blob-endpoint $(blobstorageURL)  --sas-token '"$(AZURE_STORAGE_SAS_TOKEN)"' --account-key '"$(AZURE_STORAGE_KEY)"'  --overwrite
